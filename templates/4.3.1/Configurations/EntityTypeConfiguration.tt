<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\sample.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager, namespaceName, code);

foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    var escapedEntityName = code.Escape(entity);
	var typeConfigurationName = escapedEntityName + "Configuration";

    fileManager.StartNewFile(typeConfigurationName + ".partial.cs");
    BeginNamespace(namespaceName, code);
#>
internal partial class <#=typeConfigurationName#> : EntityTypeConfiguration<<#=escapedEntityName#>>
{
	partial void CustomConfiguration();

    public <#=typeConfigurationName#>()
    {
<# 	
	string hasKey;
	if(entity.KeyMembers.Count<EdmMember>() == 1)
		hasKey = string.Format(".HasKey(t => t.{0})", entity.KeyMembers[0].Name);
   	else
		hasKey = string.Format(".HasKey(t => new {{{0}}})", string.Join(", ", entity.KeyMembers.Select(m => "t." + m.Name)));

#>
		this<#=hasKey#>;
<# 
	foreach (EdmProperty property in entity.Properties)
    {
		string required = "";
		string generateOption = GetGenerationOption(property, entity);
		string fixedLength = "";
		string maxLength = "";
		string unicode = "";
		string isConcurrencyToken = "";
		string isRowVersion = "";
		string hasPrecision = "";
		PrimitiveType edmType = (PrimitiveType) property.TypeUsage.EdmType;

		if (edmType.ClrEquivalentType == typeof(string) || edmType.ClrEquivalentType == typeof(byte[]))
		{
			if (!property.Nullable)
                required = ".IsRequired()";            
		
			Facet fixedLengthFacet = property.TypeUsage.Facets.SingleOrDefault(f => f.Name == "FixedLength");
			fixedLength = fixedLengthFacet != null && fixedLengthFacet.Value != null && ((bool)fixedLengthFacet.Value) ? ".IsFixedLength()" : "";
		
			Facet maxLengthFacet = property.TypeUsage.Facets.SingleOrDefault(f => f.Name == "MaxLength");
			maxLength = (maxLengthFacet != null && maxLengthFacet.Value != null && !maxLengthFacet.IsUnbounded) ? string.Format(".HasMaxLength({0})", maxLengthFacet.Value) : "";
		}

		if (edmType.ClrEquivalentType == typeof(string))
		{
			Facet unicodeFacet = property.TypeUsage.Facets.SingleOrDefault(f => f.Name == "Unicode");
			unicode = unicodeFacet != null && unicodeFacet.Value != null && (!(bool)unicodeFacet.Value) ? ".IsUnicode(false)" : "";
		}

		if (edmType.ClrEquivalentType == typeof(decimal))
		{
			Facet precisionFacet = property.TypeUsage.Facets.SingleOrDefault(f => f.Name == "Precision");
			Facet scaleFacet = property.TypeUsage.Facets.SingleOrDefault(f => f.Name == "Scale");

			var precision = precisionFacet == null ? null : precisionFacet.Value;
			var scale = scaleFacet == null ? null : scaleFacet.Value;

			if (precision != null && scale != null) hasPrecision = string.Format(".HasPrecision({0}, {1})", precision, scale);
		}

		if (edmType.ClrEquivalentType == typeof(DateTime)
			|| edmType.ClrEquivalentType == typeof(DateTimeOffset)
			|| edmType.ClrEquivalentType == typeof(TimeSpan))
		{
			Facet precisionFacet = property.TypeUsage.Facets.SingleOrDefault(f => f.Name == "Precision");

			var precision = precisionFacet == null ? null : precisionFacet.Value;

			if (precision != null) hasPrecision = string.Format(".HasPrecision({0})", precision);
		}

		if (property.Name == "RowVersion"
			|| (edmType.ClrEquivalentType == typeof(byte[])
				&& fixedLength == ".IsFixedLength()"
				&& maxLength == ".HasMaxLength(8)"
				&& generateOption == ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)"))
		{
			required = "";
			generateOption = "";
			fixedLength = "";
			maxLength = "";
			unicode = "";
			isConcurrencyToken = "";
			isRowVersion = ".IsRowVersion()";
		}

		var fluent = required + generateOption + fixedLength + maxLength + unicode
			+ isConcurrencyToken + isRowVersion + hasPrecision;

		if (!string.IsNullOrEmpty(fluent))
		{
#>
		this.Property(t => t.<#= property.Name#>)<#=fluent#>;
<#
		}
    } 

  	var navigationProperties = entity.NavigationProperties.Where(np => 
			{
				return ((np.DeclaringType == entity) && 
					   ((AssociationType) np.RelationshipType).IsForeignKey) && 
					   (((AssociationType) np.RelationshipType).ReferentialConstraints.Single<ReferentialConstraint>().ToRole == np.FromEndMember);
			});
	foreach(NavigationProperty navProperty in navigationProperties)
	{
		StringBuilder navPropBuilder = new StringBuilder();
		NavigationProperty navPropertyBackReference = navProperty.ToEndMember.GetEntityType().NavigationProperties
						.Where(npBack => npBack.RelationshipType == navProperty.RelationshipType && npBack != navProperty)
						.Single();
        AssociationType associationType = (AssociationType) navProperty.RelationshipType;
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One)            
            navPropBuilder.AppendFormat("this.HasRequired(t => t.{0})", code.Escape(navProperty));                            
        else            
            navPropBuilder.AppendFormat("this.HasOptional(t => t.{0})", code.Escape(navProperty));                
        
        if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
            navPropBuilder.AppendFormat(".WithMany(t => t.{0})", code.Escape(navPropertyBackReference));                
            if (associationType.ReferentialConstraints.Single().ToProperties.Count == 1)                
                navPropBuilder.AppendFormat(".HasForeignKey(d => d.{0})", associationType.ReferentialConstraints.Single().ToProperties.Single().Name);                    
            else
            	navPropBuilder.AppendFormat(".HasForeignKey(d => new {{{0}}})", string.Join(", ", associationType.ReferentialConstraints.Single().ToProperties.Select(p => "d." + p.Name)));                    
        }
        else
        {
            navPropBuilder.AppendFormat(".WithOptional(t => t.{0})", code.Escape(navPropertyBackReference));                
        }
#>
		<#= navPropBuilder.ToString() #>;
<# 
		}
#>
		CustomConfiguration();
    }
}
<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, string namespaceName, CodeGenerationTools code)
{
    fileManager.StartHeader();
	var namespaceNames = namespaceName.Split('.');
	var parentNamespaceName = string.Join(".", namespaceNames.Take(namespaceNames.Length - 1));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration;
using System.Linq;
using <#=code.EscapeNamespace(parentNamespaceName)#>.Entities;

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
    WriteProperty(Accessibility.ForProperty(edmProperty),
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}

string GetGenerationOption(EdmProperty property, EntityType entity)
{
	string result = "";
	bool isPk = entity.KeyMembers.Contains(property);
	MetadataProperty storeGeneratedPatternProperty = null;
	string storeGeneratedPatternPropertyValue = "None";
	
	if(property.MetadataProperties.TryGetValue("http://schemas.microsoft.com/ado/2009/02/edm/annotation:StoreGeneratedPattern", false, out storeGeneratedPatternProperty))	
		storeGeneratedPatternPropertyValue = storeGeneratedPatternProperty.Value.ToString();		
	
	PrimitiveType edmType = (PrimitiveType) property.TypeUsage.EdmType; 
	if (storeGeneratedPatternPropertyValue == "Computed")
	{
	    result = ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed)";
	}
	else if ((edmType.ClrEquivalentType == typeof(int)) || (edmType.ClrEquivalentType == typeof(short)) || (edmType.ClrEquivalentType == typeof(long)))
	{
	    if (isPk && (storeGeneratedPatternPropertyValue != "Identity"))
	        result = ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.None)";
	    else if ((!isPk || (entity.KeyMembers.Count > 1)) && (storeGeneratedPatternPropertyValue == "Identity"))
	        result = ".HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity)";
	}	
	return result;    
}
#>
