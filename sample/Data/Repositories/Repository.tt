<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\Database.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager, namespaceName, code);

foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    var escapedEntityName = code.Escape(entity);
	var repositoryName = escapedEntityName + "Repository";

    fileManager.StartNewFile(repositoryName + ".partial.cs");
    BeginNamespace(namespaceName, code);
#>
public partial class <#=repositoryName#> : IDbSet<<#=escapedEntityName#>>
{
    private readonly DbSet<<#=escapedEntityName#>> _dbSet;

    internal <#=repositoryName#>(DbSet<<#=escapedEntityName#>> dbSet)
    {
		_dbSet = dbSet;
    }
    
	public <#=escapedEntityName#> Add(<#=escapedEntityName#> entity)
	{
 		return _dbSet.Add(entity);
	}

	public <#=escapedEntityName#> Attach(<#=escapedEntityName#> entity)
	{
 		return _dbSet.Attach(entity);
	}

	public <#=escapedEntityName#> Create()
	{
 		return _dbSet.Create();
	}

    TDerivedEntity IDbSet<<#=escapedEntityName#>>.Create<TDerivedEntity>()
    {
        return _dbSet.Create<TDerivedEntity>();
    }

	public <#=escapedEntityName#> Find(params object[] keyValues)
	{
 		return _dbSet.Find(keyValues);
	}

	public System.Collections.ObjectModel.ObservableCollection<<#=escapedEntityName#>> Local
	{
		get { return _dbSet.Local; }
	}

	public <#=escapedEntityName#> Remove(<#=escapedEntityName#> entity)
	{
		return _dbSet.Remove(entity);
	}

    public Type ElementType
    {
        get { return ((IQueryable)_dbSet).ElementType; }
    }

    public System.Linq.Expressions.Expression Expression
    {
        get { return ((IQueryable)_dbSet).Expression; }
    }

    public System.Linq.IQueryProvider Provider
    {
        get { return ((IQueryable)_dbSet).Provider; }
    }

    public IEnumerator<<#=escapedEntityName#>> GetEnumerator()
    {
        return ((IEnumerable<<#=escapedEntityName#>>) _dbSet).GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return ((IEnumerable) _dbSet).GetEnumerator();
    }
}

<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, string namespaceName, CodeGenerationTools code)
{
    fileManager.StartHeader();
	var namespaceNames = namespaceName.Split('.');
	var parentNamespaceName = string.Join(".", namespaceNames.Take(namespaceNames.Length - 1));
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using <#=code.EscapeNamespace(parentNamespaceName)#>.Entities;

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
    WriteProperty(Accessibility.ForProperty(edmProperty),
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
                  navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
                  code.Escape(navigationProperty),
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}
#>
