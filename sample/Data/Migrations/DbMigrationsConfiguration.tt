<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".partial.cs"#>
<#

var loader = new MetadataLoader(this);
var region = new CodeRegion(this);
var inputFile = @"..\Database.edmx";
var ItemCollection = loader.CreateEdmItemCollection(inputFile);

Code = new CodeGenerationTools(this);
EFTools = new MetadataTools(this);
ObjectNamespace = Code.VsNamespaceSuggestion();
ModelNamespace = loader.GetModelNamespace(inputFile);

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity;
using System.Data.Entity.Migrations;

<#
if (!String.IsNullOrEmpty(ObjectNamespace))
{
#>
namespace <#=Code.EscapeNamespace(ObjectNamespace)#>
{
<#
    PushIndent(CodeRegion.GetIndent(1));
}
#>
/// <remarks>
/// To add new migration run the following script
/// Add-Migration ${migrationName} -ProjectName "Data" -StartUpProjectName "${projectName}" -ConfigurationTypeName "<#=Code.EscapeNamespace(ObjectNamespace)#>.DbMigrationsConfiguration" -ConnectionString ${connectionString} -ConnectionProviderName "System.Data.SqlClient"
/// Add-Migration InitialCreate -ProjectName "Data" -StartUpProjectName "Data" -ConfigurationTypeName "<#=Code.EscapeNamespace(ObjectNamespace)#>.DbMigrationsConfiguration" -ConnectionString "Server=localhost;Database=EF;Trusted_Connection=True;" -ConnectionProviderName "System.Data.SqlClient"
/// </remarks>
public sealed class DbMigrationsConfiguration : DbMigrationsConfiguration<<#=Code.Escape(container)#>>
{
    public DbMigrationsConfiguration()
    {
        var dbContextType = typeof(<#=Code.Escape(container)#>);

        AutomaticMigrationsEnabled = true;
        MigrationsAssembly = dbContextType.Assembly;
        MigrationsNamespace = "<#=Code.EscapeNamespace(ObjectNamespace)#>";
        MigrationsDirectory = "Migrations";
        ContextType = dbContextType;
    }

    protected override void Seed(<#=Code.Escape(container)#> context)
    {
        base.Seed(context);
    }

    public static void UpdateSchema(string connectionString)
    {
        var migrator = new MigrateDatabaseToLatestVersion<<#=Code.Escape(container)#>, DbMigrationsConfiguration>();

        using (var context = new <#=Code.Escape(container)#>(connectionString))
        {
            migrator.InitializeDatabase(context);
        }
    }
}
<#

if (!String.IsNullOrEmpty(ObjectNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+
string ModelNamespace { get; set; }
string ObjectNamespace { get; set; }
CodeGenerationTools Code { get; set; }
MetadataTools EFTools { get; set; }
#>